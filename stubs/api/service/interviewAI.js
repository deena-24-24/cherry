const initialGreetings = {
  frontend: "Здравствуйте! Давайте начнем наше собеседование на позицию Frontend-разработчика. Расскажите, пожалуйста, немного о себе и вашем опыте.",
  backend: "Добрый день. Рад приветствовать вас на собеседовании на позицию Backend-разработчика. Для начала, расскажите немного о своем самом интересном проекте.",
  fullstack: "Здравствуйте! Начнем собеседование на позицию Fullstack-разработчика. Расскажите о себе и технологиях, с которыми вы предпочитаете работать.",
};

const responses = {
  frontend: [
    "Отлично, спасибо. Теперь расскажите о вашем опыте с React Hooks.",
    "Как вы управляете состоянием в сложных React-приложениях?",
    "Что такое 'virtual DOM' и как он работает?",
    "Интересно. А какие CSS-фреймворки вы использовали в своих проектах?"
  ],
  backend: [
    "Хорошо. Как вы обеспечиваете безопасность RESTful API?",
    "Расскажите о вашем опыте работы с NoSQL базами данных, например, MongoDB.",
    "Что такое микросервисная архитектура и какие у нее плюсы и минусы?",
    "Как бы вы спроектировали систему кеширования для высоконагруженного сервиса?"
  ],
  fullstack: [
    "Понятно. Как вы организуете взаимодействие между фронтендом и бэкендом в Fullstack-приложении?",
    "Расскажите о последнем Fullstack-проекте, над которым вы работали. Какой был ваш стек?",
    "Как вы подходите к вопросам аутентификации и авторизации в веб-приложениях?",
    "Опишите процесс деплоя Fullstack-приложения, от кода до продакшена."
  ],
};

/**
 * Сервис, инкапсулирующий логику ответов ИИ-интервьюера.
 */
class AiService {
  /**
   * Генерирует ответ ИИ на основе транскрипции речи пользователя.
   * @param {string} transcript - Расшифрованный текст от пользователя.
   * @param {string} position - Позиция, на которую проходит собеседование.
   * @returns {Promise<string>} - Текстовый ответ от ИИ.
   */
  async getAIResponse(transcript, position) {
    // Если пришел стартовый триггер, отправляем приветствие
    if (transcript === 'INTERVIEW_START_TRIGGER') {
      return initialGreetings[position] || "Здравствуйте! Давайте начнем.";
    }

    const possibleResponses = responses[position] || [...responses.frontend, ...responses.backend];
    const randomResponse = possibleResponses[Math.floor(Math.random() * possibleResponses.length)];

    // Имитация задержки ответа от LLM
    await new Promise(resolve => setTimeout(resolve, Math.random() * 1500 + 500));

    return `Вы сказали: "${transcript}". ${randomResponse}`;
  }
}

module.exports = new AiService();