const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const { createServer } = require('http');
const { Server } = require('socket.io');
require('dotenv').config();

const authRoutes = require('./routes/authRoutes');
const candidateRoutes = require('./routes/candidateRoutes');
const hrRoutes = require('./routes/hrRoutes');
// const chatRoutes = require('./routes/chatRoutes'); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ
const interviewRoutes = require('./routes/interviewRoutes'); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ
const codeRoutes = require('./routes/codeRoutes'); // –ù–æ–≤—ã–π —Ä–æ—É—Ç

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Express
const app = express();
const server = createServer(app); // –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Socket.io
const FRONTEND_ORIGIN = process.env.FRONTEND_ORIGIN || 'http://localhost:8099';
const io = new Server(server, {
  cors: {
    origin: FRONTEND_ORIGIN, // URL —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (brojs –ø–æ—Ä—Ç 8099)
    methods: ["GET", "POST"]
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
app.use(cors({ origin: FRONTEND_ORIGIN })); // –í–∫–ª—é—á–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use(express.json()); // –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –ø–∞—Ä—Å–∏—Ç—å JSON-—Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–æ–≤

// --- –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ê–ó–ï –î–ê–ù–ù–´–• ---
const MONGO_URI = process.env.MONGO_URI || 'mongodb://localhost:27017/careerup';

mongoose.connect(MONGO_URI)
  .then(() => console.log('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB'))
  .catch(err => console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));


// --- –û–°–ù–û–í–ù–´–ï –ú–ê–†–®–†–£–¢–´ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
app.use('/api/authRoutes', authRoutes);
app.use('/api/candidate', candidateRoutes);
app.use('/api/hr', hrRoutes);
// app.use('/api/chat', chatRoutes);
app.use('/api/interview', interviewRoutes); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º
app.use('/api/code', codeRoutes); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–æ—É—Ç


app.get('/', (req, res) => {
  res.send('–°–µ—Ä–≤–µ—Ä CareerUp —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
});

// --- WebSocket –î–õ–Ø –ò–ù–¢–ï–†–í–¨–Æ (–ù–ï –ú–ï–®–ê–ï–¢ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú –§–£–ù–ö–¶–ò–Ø–ú) ---
const { InterviewService } = require('./services/InterviewService');
const interviewService = new InterviewService();

io.on('connection', (socket) => {
  console.log('User connected:', socket.id);

  socket.on('join-interview', (sessionId) => {
    socket.join(sessionId);
    console.log(`User ${socket.id} joined session ${sessionId}`);
  });

  socket.on('audio-chunk', async (data) => {
    try {
      const { sessionId, chunk, position = 'frontend' } = data;

      const result = await interviewService.processAudioInteraction(
        sessionId,
        chunk,
        position
      );

      io.to(sessionId).emit('ai-audio-response', {
        text: result.textResponse,
        audio: result.audioResponse,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('Error processing audio:', error);
      socket.emit('error', { message: 'Audio processing failed' });
    }
  });

  socket.on('user-transcript', async (data) => {
    try {
      const { sessionId, text } = data;
      const result = await interviewService.processAudioInteraction(
        sessionId,
        Buffer.from(text || ''),
        'transcript'
      );
      io.to(sessionId).emit('ai-audio-response', {
        text: `–í—ã —Å–∫–∞–∑–∞–ª–∏: "${text}". ${result.textResponse}`,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('Error handling transcript:', error);
      socket.emit('error', { message: 'Transcript processing failed' });
    }
  });

  socket.on('disconnect', () => {
    console.log('User disconnected:', socket.id);
  });
});

// --- –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
const PORT = process.env.PORT || 5000;
server.listen(PORT, () => { // –ú–µ–Ω—è–µ–º app.listen –Ω–∞ server.listen
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üîä WebSocket –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ ws://localhost:${PORT}`);
});

module.exports = app;